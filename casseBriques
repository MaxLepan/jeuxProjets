var screenWidth = width;
var screenHeight = height;

var life = 3;
var score = 0;

var gameFinishedLose = false;
var gameFinishedWin = false;



//Vitesse des pads
var padSpeed = 10;

//Positions et dimensions de la balle
var ballRadius = 20;
var ballX = screenWidth/2;
var ballY = screenHeight-ballRadius-20;
var ballDirectionX = floor(random(-2, 3));
var ballDirectionY = floor(random(-1,-3));
var ballSpeed = 2;

//Positions et dimensions du pad 1
var p1PadX = (screenWidth/2)-(80/2);
var p1PadY = screenHeight-25;
var p1PadW = 80;
var p1PadH = 15;

//Direction des pads
var p1DirectionX = 0;

//dimensions et position des briques
var brickLines = 5;
var bricksColumn = 3;
var bricksTab = [];
for (var i=0; i<bricksColumn; i++){
    bricksTab[i] = [];
    for (var j = 0; j<brickLines; j++){
        bricksTab[i][j] = floor(random(0,5));
    }
}
var brickW = 70;
var brickH = 30;
var brickX = 20;
var brickY = 50;

var destroyedBricks = 0;

var setup = function () {
    
    gameFinishedWin = false;
    p1PadX = (screenWidth/2)-(80/2);
    p1PadY = screenHeight-25;
    p1DirectionX = 0;
    
    ballX = screenWidth/2;
    ballY = screenHeight-ballRadius-20;
    
    ballDirectionX = floor(random(-2, 3));
    ballDirectionY = floor(random(-1,-3));
    text("ptdr t ki", 50, 50);
    life = 3;
    for (var i=0; i<bricksColumn; i++){
        for (var j = 0; j<brickLines; j++){
            bricksTab[i][j] = floor(random(0,2));
        }
    }
    life = 3;
};

//Récupérer les touches enfoncées
keyPressed = function() {
    if (key.toString() === 'q'){
        p1DirectionX = -1;
    }
    if (key.toString() === 'd'){
        p1DirectionX = 1;
    }
};

//Récupérer les touches relachées
keyReleased = function() {
    if (key.toString() === 'q'){
        p1DirectionX = 0;
    }
    if (key.toString() === 'd'){
        p1DirectionX = 0;
    }
};

//calculer les nouvelles positions en fonction des directions et de la vitesse
var adjustPosition = function() {
    //positions en Y des raquettes + direction * vitesse
    p1PadX = p1PadX+(p1DirectionX * padSpeed);
    
    //position en X et Y de la balle 
    ballX = ballX + (ballDirectionX * ballSpeed);
    ballY = ballY + (ballDirectionY * ballSpeed);
    
    //teste si la balle touche le coté droit
    if (ballX+ballRadius/2 >= screenHeight) {
        ballDirectionX = -1 * ballDirectionX;
    }
    //teste si la balle touche le coté gauche
    if (ballX-ballRadius/2 <= 0) {
        ballDirectionX = -1 * ballDirectionX;
    }
    //teste si la balle touche le bas
    if (ballY+ballRadius/2 >= screenHeight) {
        ballDirectionY = -1 * ballDirectionY;
        life--;
        background(255, 0, 0);
    }
    //teste si la balle touche le haut
    if (ballY-ballRadius/2 <= 0) {
        ballDirectionY = -1 * ballDirectionY;
    }
    
    //test si la balle touche le pad 1
    if ((ballY+ballRadius/2 >= p1PadY) && (ballX >= p1PadX) && (ballX <= p1PadX+p1PadW)){
        ballDirectionY = -1 * ballDirectionY;
    }
    
    for (var i = 0; i < bricksColumn; i++){
        for (var j = 0; j < brickLines; j++){
            if (bricksTab[i][j] > 0) {
                if ((ballY < brickY+brickH+ballRadius/2) && (ballY > brickY-ballRadius/2) && (ballX > brickX) && (ballX < brickX+brickW)){
                    ballDirectionY = -1 * ballDirectionY;
                }
                if ((ballY < brickY+brickH) && (ballY > brickY) && (ballX > brickX-ballRadius/2) && (ballX < brickX+brickW+ballRadius/2)){
                    ballDirectionX = -1 * ballDirectionX;
                }
                //première condition: coin haut gauche
                if ((ballY > brickY-ballRadius/2) && (ballX > brickX-ballRadius/2) && (ballY < brickY) && (ballX < brickX)){
                    ballDirectionX = -1 * ballSpeed;
                    ballDirectionY = -1 * ballSpeed;
                }
                //deuxième condition: coin haut droite
                if ((ballY > brickY-ballRadius/2) && (ballX > brickX + brickW + ballRadius/2) && (ballY < brickY) && (ballX < brickX + brickW + ballRadius/2)){
                    ballDirectionX = 1 * ballSpeed;
                    ballDirectionY = -1 * ballSpeed;
                }
                //troisième condition: coin bas gauche
                if ((ballY < brickY + brickH + ballRadius/2) && (ballX > brickX - ballRadius/2) && (ballY > brickY + brickH) && (ballX < brickX)){
                    ballDirectionX = -1 * ballSpeed;
                    ballDirectionY = 1 * ballSpeed;
                }
                //quatrième condition: coin bas droite
                if ((ballY < brickY + brickH + ballRadius/2) && (ballX < brickX + brickW + ballRadius/2) && (ballY > brickY + brickH) && (ballX > brickX + brickW)){
                    ballDirectionX = 1 * ballSpeed;
                    ballDirectionY = 1 * ballSpeed;
                }
            }
            brickX = brickX+5+brickW;
        }
        brickY = brickY+brickH;
        brickX = 20;
    }
    brickY = 40;
};

//dessiner le pad 1
var drawPad1 = function() {
    fill(255, 0, 0);
    rect(p1PadX, p1PadY, p1PadW, p1PadH);
};

//dessiner les briques
var drawBricks = function() {
    destroyedBricks = 0;
    for (var i = 0; i < bricksColumn; i++){
        for (var j = 0; j < brickLines; j++){
            //if la balle touche une brique
            if (bricksTab[i][j] > 0){
                if ((ballY < brickY+brickH+ballRadius/2) && (ballY > brickY-ballRadius/2) && (ballX > brickX-ballRadius/2) && (ballX < brickX+brickW+ballRadius/2) ){
                    bricksTab[i][j] = bricksTab[i][j]-1;
                    score = score + 50;
                }
                //change la couleur
                if (bricksTab[i][j] === 1){
                    
                }
                if (bricksTab[i][j] === 2){
                    
                }
                if (bricksTab[i][j] === 3){
                    
                }
                rect(brickX, brickY, brickW, brickH);
            } else {
                destroyedBricks++;
            }
            brickX = brickX+5+brickW;
        }
        brickY = brickY+brickH;
        brickX = 20;
    }
    brickY = 40;
};

//dessiner la balle
var drawBall = function() {
    fill(255, 255, 255);
    ellipse(ballX, ballY, ballRadius, ballRadius);
};

//Regarde quel joueur a gagné
var gameOverLose = function() {
    //vérifie si le j1 a le score maximal

    if (life <= 0){
        life = 1;
        //arrête la balle
        ballDirectionX = 0;
        ballDirectionY = 0;
        //met le booléen de la partie terminée à true
        gameFinishedLose = true;
        //affiche qui a gagné
        text("YOU LOSE", screenWidth/2-20, screenHeight/2-10);
        //affiche l'instruction pour relancer une partie
        text("CLICK TO RESTART", screenWidth/2-50, screenHeight/2+10);
    }
};

var gameOverWin = function () {
        if (destroyedBricks === brickLines * bricksColumn){
            //arrête la balle
            ballDirectionX = 0;
            ballDirectionY = 0;
            //met le booléen de la partie terminée à true
            gameFinishedWin = true;
            //affiche qui a gagné
            text("YOU WIN", screenWidth/2-20, screenHeight/2-10);
            //affiche l'instruction pour relancer une partie
            text("CLICK TO RESTART", screenWidth/2-50, screenHeight/2+10);
        
    }
};

var lifeAndScore = function () {
    text("REMAINING LIFE :" + life, 20, 20);
    text("SCORE : " + score, 300, 20);
};

//affichage
var draw = function() {
    //dessiner le fond
    background(0, 0, 0);
    //dessiner le pad 1
    drawPad1();
    //dessiner la balle
    drawBall();
    //dessiner les briques
    drawBricks();
    //calculs des positions des pads + balle
    adjustPosition();
    //dessine le score et le nombre de vies
    lifeAndScore();
    //game over
    gameOverLose();
    gameOverWin();
    
    if (gameFinishedWin === true && mouseIsPressed) {
        setup();
        
    }

    if (gameFinishedLose === true && mouseIsPressed) {
        Program.restart();
    }
    
};
